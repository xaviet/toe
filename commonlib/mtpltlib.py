#! /usr/bin/python3
# coding=utf-8
'''
  mtpltlib.py
  ref : http://matplotlib.org/examples/index.html
'''

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import random
from mpl_toolkits.mplot3d import Axes3D
import time


def test1():
  fig = plt.figure()
  ax = Axes3D(fig)
  X = np.arange(-4, 4, 0.25)
  Y = np.arange(-4, 4, 0.25)
  X, Y = np.meshgrid(X, Y)
  R = np.sqrt(X**2 + Y**2)
  Z = np.sin(R)

  ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=plt.cm.hot)
  ax.contourf(X, Y, Z, zdir='z', offset=-2, cmap=plt.cm.hot)
  ax.set_zlim(-2,2)

  #plt.savefig('../plot3d_ex.png',dpi=48)
  plt.show()
  time.sleep(1)
  plt.close('all')
  

def test():
  a = [i for i in range(256)]
  b = [(random.random(),random.random()) for i in a]
  fig1 = plt.figure(1)
  plt.plot(a,b)
  plt.show()
  

gt1030Per='''1,1,517.9111,845
1,2,517.9111,627
1,4,517.9111,698
1,8,517.9111,688
1,16,517.9111,613
1,32,517.9111,709
1,64,517.9111,728
1,128,517.9111,667
1,256,517.9111,725
1,512,517.9111,654
1,1024,517.9111,679
2,1,517.9111,721
2,2,517.9111,632
2,4,517.9111,709
2,8,517.9111,704
2,16,517.9111,637
2,32,517.9111,633
2,64,517.9111,709
2,128,517.9111,730
2,256,517.9111,726
2,512,517.9111,655
2,1024,517.9111,693
4,1,517.9111,647
4,2,517.9111,669
4,4,517.9111,643
4,8,517.9111,718
4,16,517.9111,720
4,32,517.9111,649
4,64,517.9111,670
4,128,517.9111,744
4,256,517.9111,671
4,512,517.9111,747
4,1024,517.9111,1041
8,1,517.9111,692
8,2,517.9111,729
8,4,517.9111,644
8,8,517.9111,730
8,16,517.9111,732
8,32,517.9111,728
8,64,517.9111,649
8,128,517.9111,652
8,256,517.9111,742
8,512,517.9111,771
8,1024,517.9111,1441
16,1,517.9111,776
16,2,517.9111,659
16,4,517.9111,703
16,8,517.9111,647
16,16,517.9111,646
16,32,517.9111,742
16,64,517.9111,650
16,128,517.9111,722
16,256,517.9111,870
16,512,517.9111,1294
16,1024,517.9111,2354
32,1,517.9111,657
32,2,517.9111,644
32,4,517.9111,646
32,8,517.9111,744
32,16,517.9111,682
32,32,517.9111,646
32,64,517.9111,750
32,128,517.9111,719
32,256,517.9111,1290
32,512,517.9111,2034
32,1024,0.2059,2950
64,1,0.5907,356
64,2,0.9754,283
64,4,0.3602,336
64,8,0.7450,313
64,16,0.1297,309
64,32,0.5145,299
64,64,0.8993,308
64,128,0.2840,314
64,256,0.6688,291
64,512,0.0535,345
64,1024,0.4383,284
128,1,0.8231,300
128,2,0.2078,302
128,4,0.5926,317
128,8,0.9774,263
128,16,0.3621,264
128,32,0.7469,287
128,64,0.1317,279
128,128,0.5164,258
128,256,0.9012,264
128,512,0.2860,263
128,1024,0.6707,262
256,1,0.0555,275
256,2,0.4403,282
256,4,0.8250,273
256,8,0.2098,265
256,16,0.5946,300
256,32,0.9793,281
256,64,0.3641,260
256,128,0.7489,284
256,256,0.1336,262
256,512,0.5184,276
256,1024,0.9032,289
512,1,0.2879,270
512,2,0.6727,258
512,4,0.0574,269
512,8,0.4422,272
512,16,0.8270,265
512,32,0.2117,267
512,64,0.5965,259
512,128,0.9813,267
512,256,0.3660,264
512,512,0.7508,270
512,1024,0.1356,291
1024,1,0.5203,264
1024,2,0.9051,292
1024,4,0.2899,288
1024,8,0.6746,315
1024,16,0.0594,258
1024,32,0.4442,264
1024,64,0.8289,263
1024,128,0.2137,263
1024,256,0.5985,261
1024,512,0.9832,268
1024,1024,0.3680,260'''

gt620mPer='''1,1,522.0397,830
1,2,522.0397,823
1,4,522.0397,684
1,8,522.0397,675
1,16,522.0397,675
1,32,522.0397,694
1,64,522.0397,707
1,128,522.0397,721
1,256,522.0397,710
1,512,522.0397,732
1,1024,522.0397,776
2,1,522.0397,738
2,2,522.0397,708
2,4,522.0397,721
2,8,522.0397,710
2,16,522.0397,711
2,32,522.0397,707
2,64,522.0397,718
2,128,522.0397,727
2,256,522.0397,727
2,512,522.0397,726
2,1024,522.0397,837
4,1,522.0397,734
4,2,522.0397,713
4,4,522.0397,712
4,8,522.0397,727
4,16,522.0397,722
4,32,522.0397,722
4,64,522.0397,724
4,128,522.0397,720
4,256,522.0397,712
4,512,522.0397,770
4,1024,522.0397,1239
8,1,522.0397,712
8,2,522.0397,709
8,4,522.0397,718
8,8,522.0397,740
8,16,522.0397,744
8,32,522.0397,736
8,64,522.0397,790
8,128,522.0397,746
8,256,522.0397,823
8,512,522.0397,1221
8,1024,522.0397,2145
16,1,522.0397,766
16,2,522.0397,754
16,4,522.0397,769
16,8,522.0397,735
16,16,522.0397,718
16,32,522.0397,728
16,64,522.0397,763
16,128,522.0397,861
16,256,522.0397,1285
16,512,522.0397,2033
16,1024,522.0397,4967
32,1,522.0397,1087
32,2,522.0397,1076
32,4,522.0397,1114
32,8,522.0397,1095
32,16,522.0397,1096
32,32,522.0397,1120
32,64,522.0397,1105
32,128,522.0397,1275
32,256,522.0397,2132
32,512,522.0397,3726
32,1024,0.4152,7366
64,1,0.1125,419
64,2,0.8098,381
64,4,0.5070,650
64,8,0.2043,423
64,16,0.9016,493
64,32,0.5988,397
64,64,0.2961,544
64,128,0.9934,415
64,256,0.6906,346
64,512,0.3879,362
64,1024,0.0851,714
128,1,0.7824,380
128,2,0.4797,363
128,4,0.1769,351
128,8,0.8742,543
128,16,0.5715,610
128,32,0.2687,457
128,64,0.9660,403
128,128,0.6633,333
128,256,0.3605,416
128,512,0.0578,355
128,1024,0.7551,331
256,1,0.4523,351
256,2,0.1496,344
256,4,0.8469,327
256,8,0.5441,334
256,16,0.2414,330
256,32,0.9387,328
256,64,0.6359,331
256,128,0.3332,428
256,256,0.0305,392
256,512,0.7277,336
256,1024,0.4250,335
512,1,0.1223,340
512,2,0.8195,337
512,4,0.5168,362
512,8,0.2141,382
512,16,0.9113,335
512,32,0.6086,342
512,64,0.3059,336
512,128,0.0031,330
512,256,0.7004,329
512,512,0.3977,331
512,1024,0.0949,327
1024,1,0.7922,335
1024,2,0.4895,331
1024,4,0.1867,329
1024,8,0.8840,372
1024,16,0.5813,333
1024,32,0.2785,333
1024,64,0.9758,348
1024,128,0.6731,398
1024,256,0.3703,334
1024,512,0.0676,380
1024,1024,0.7649,344'''

def cudaPer3D(perInfo):
  fig = plt.figure()
  ax = Axes3D(fig) 
  x=[]
  y=[]
  z=[]
  r=[]
  for el0 in perInfo.split('\n'):
    elx,ely,elr,elz=el0.split(',')
    if(float(elr)<1):
      continue
    x.append(float(elx))
    y.append(float(ely))
    z.append(float(elz))
    r.append(float(elr))
  print(sorted(z)[0],sorted(z)[-1])
  ax.scatter(x,y,z,s=10, c=r, marker='o')
  plt.show() 

if (__name__ == '__main__'):
  cudaPer3D(gt620mPer)